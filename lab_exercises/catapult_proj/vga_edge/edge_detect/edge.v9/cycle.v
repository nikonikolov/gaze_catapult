// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   lb3314@EEWS104A-019
//  Generated date: Tue Mar 24 18:46:45 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    edge_core
// ------------------------------------------------------------------


module edge_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [89:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [9:0] regs_regs_1_sg1_sva;
    reg [9:0] regs_regs_0_sg1_sva;
    reg [9:0] regs_regs_0_sg1_sva_1;
    reg [10:0] ACC2_acc_psp_sva;
    reg [10:0] red_4_sg1_lpi_1_dfm;
    reg FRAME_slc_2_mdf_sva;
    reg [9:0] ACC2_asn_itm;
    reg [7:0] red_4_sg1_lpi_1_dfm_2;

    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        regs_regs_1_sg1_sva = 10'b0;
        regs_regs_0_sg1_sva = 10'b0;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            ACC2_asn_itm = regs_regs_1_sg1_sva;
            regs_regs_1_sg1_sva = regs_regs_0_sg1_sva;
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            regs_regs_0_sg1_sva_1 = vin_rsc_mgc_in_wire_d[29:20];
            ACC2_acc_psp_sva = readslicef_12_11_1((({1'b1 , (~ regs_regs_0_sg1_sva_1)
                , 1'b1}) + conv_u2s_11_12({ACC2_asn_itm , 1'b1})));
            red_4_sg1_lpi_1_dfm = ACC2_acc_psp_sva & (signext_11_1(~ (ACC2_acc_psp_sva[10])));
            FRAME_slc_2_mdf_sva = readslicef_10_1_9((({1'b1 , (signext_9_3(~ (red_4_sg1_lpi_1_dfm[10:8])))})
                + 10'b1));
            red_4_sg1_lpi_1_dfm_2 = (red_4_sg1_lpi_1_dfm[7:0]) | ({{7{FRAME_slc_2_mdf_sva}},
                FRAME_slc_2_mdf_sva});
            vout_rsc_mgc_out_stdreg_d <= {red_4_sg1_lpi_1_dfm_2 , ({{1{FRAME_slc_2_mdf_sva}},
                FRAME_slc_2_mdf_sva}) , red_4_sg1_lpi_1_dfm_2 , ({{1{FRAME_slc_2_mdf_sva}},
                FRAME_slc_2_mdf_sva}) , red_4_sg1_lpi_1_dfm_2 , ({{1{FRAME_slc_2_mdf_sva}},
                FRAME_slc_2_mdf_sva})};
            regs_regs_0_sg1_sva = regs_regs_0_sg1_sva_1;
          end
        end
      end
    end
    red_4_sg1_lpi_1_dfm_2 = 8'b0;
    ACC2_asn_itm = 10'b0;
    FRAME_slc_2_mdf_sva = 1'b0;
    red_4_sg1_lpi_1_dfm = 11'b0;
    ACC2_acc_psp_sva = 11'b0;
    regs_regs_0_sg1_sva_1 = 10'b0;
    regs_regs_0_sg1_sva = 10'b0;
    regs_regs_1_sg1_sva = 10'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function [10:0] signext_11_1;
    input [0:0] vector;
  begin
    signext_11_1= {{10{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function [8:0] signext_9_3;
    input [2:0] vector;
  begin
    signext_9_3= {{6{vector[2]}}, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    edge_0
//  Generated from file(s):
//    4) $PROJECT_HOME/edge.c
// ------------------------------------------------------------------


module edge_0 (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [89:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [89:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(90)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  edge_core edge_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



